////////////////////////////////////////////////////////////////////////////////////////
//                                                                                    //
//              Configuratie voor project: BAG > XML Files naar FSS                   //
//                                                                                    //
//                              Object Vision 2018                                    //
//                                                                                    //
//                                                                                    //
//                           Test inlezen  panden voor OperatorTest Large             //
//                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////

container XML
{
	parameter<string> XmlDir := '%RegressionDataDir%/XML';
	unit<dpoint> rdc_base;
	unit<dpoint> rdc_meter := range(rdc_base, point_yx(300000d,0d), point_yx(625000d,280000d)), IsHidden = "True";
	unit<ipoint> rdc_mm    := gridset(rdc_meter, point_yx(0.001, 0.001), point_yx(0.0,0.0), ipoint), IsHidden = "True";

	container folderinfo
	{
		container impl
		{
			parameter<string> ComSpec         := Expand(., '%env:ComSpec%');
			parameter<string> FileNameDirInfo := '%LocalDataProjDir%/dirinfo_pand_nhr.str';

			parameter<string> DirCmdOrg       := Expand(., 'Dir '+ XmlDir +'/*.xml > ' + FileNameDirInfo);
			parameter<string> DirCmd          := Replace(DirCmdOrg, '/', '\\') + ' /B';
		}

		parameter<UInt32> writePandenlijst_ec := exec_ec(impl/ComSpec, '/c ' + impl/DirCmd, Expand(., '%LocalDataProjDir%'));

		parameter<string> pandenlijst : Storagename = "=writePandenlijst_ec==0?impl/FileNameDirInfo:'Cannot Create Pandenlijst'";

		container bestand_selectie
		{
			parameter<uint32> nr_regels:=strcount(pandenlijst,'\n');
			unit<uint32> alle_regels := range(uint32, 0, nr_regels)
			{
				attribute<string> inhoud     := uppercase(readLines(pandenlijst, ., 0));
				attribute<bool>   isxmlfile  := strcount(inhoud,'.XML') > 0;
				attribute<.>      id         := id(.);
			}
			container xml_bestanden
			{
				unit<uint32> pand := select_with_org_rel(alle_regels/isxmlfile && strcount(alle_regels/inhoud,'PND')> 0)
				{
					attribute<string> naam := alle_regels/inhoud[org_rel];
				}
			}
		}
	}

	container pand
	{
		unit<uint32> all:= 
			union_unit(PerFileSet/fs_1/ParsedXML/bag_LVC_pand,PerFileSet/fs_2/ParsedXML/bag_LVC_pand,PerFileSet/fs_3/ParsedXML/bag_LVC_pand,PerFileSet/fs_4/ParsedXML/bag_LVC_pand,PerFileSet/fs_5/ParsedXML/bag_LVC_pand)
		{
			attribute<string> pand_id := 
				union_data(.,PerFileSet/fs_1/ParsedXML/bag_LVC_pand/bag_LVC_identificatie,PerFileSet/fs_2/ParsedXML/bag_LVC_pand/bag_LVC_identificatie,PerFileSet/fs_3/ParsedXML/bag_LVC_pand/bag_LVC_identificatie,PerFileSet/fs_4/ParsedXML/bag_LVC_pand/bag_LVC_identificatie,PerFileSet/fs_5/ParsedXML/bag_LVC_pand/bag_LVC_identificatie);

			attribute<rdc_mm> geometry_mm (poly):= 
				union_data(.,PerFileSet/fs_1/geoBuilder/result,PerFileSet/fs_2/geoBuilder/result,PerFileSet/fs_3/geoBuilder/result,PerFileSet/fs_4/geoBuilder/result,PerFileSet/fs_5/geoBuilder/result);

			attribute<float64> area:= area(geometry_mm[rdc_meter], float64);

			container tests
			{
				parameter<bool> pand_id_0        := all/pand_id[0] == '0003100000117485';
				parameter<bool> pand_id_500000   := all/pand_id[500000] == '0040100000000468';
				parameter<bool> pand_id_1000000  := all/pand_id[1000000]== '0080100000489319';
				parameter<bool> strcount_0       := sum(strcount(all/pand_id,'0')) == 38691899;

				parameter<float64> dif := 0.99d;
				parameter<bool> area_id_0        := float_isNearby(all/area[0]      , -312.912538,  dif);
				parameter<bool> area_id_500000   := float_isNearby(all/area[500000] ,  -32.681908,  dif);
				parameter<bool> area_id_1000000  := float_isNearby(all/area[1000000],  -57.6939875, dif);
				parameter<bool> meanarea         := float_isNearby(mean(all/area)   , -253.061977,  dif);

				parameter<bool> result           := pand_id_0 && pand_id_500000 && pand_id_1000000 && strcount_0 && area_id_0 && area_id_500000 && area_id_1000000 && meanarea;
			}
		}

		unit<uint32> FilesAll := folderinfo/bestand_selectie/xml_bestanden/pand
		{
			attribute<uint32> fileset_rel   := uint32(roundUp(float32(id(.) + 1) / float32(100)));
			attribute<string> FileNumberStr := string(id(.) + 1);
			attribute<string> FileName      := FilesAll/naam;
		}

		unit<uint32> fileset:= unique(FilesAll/fileset_rel)
		{
			attribute<uint32> values_extra := values + MakeDefined((0 * uint32(substr(/XML/folderinfo/pandenlijst,0,1))),0);
		}
		container PerFileSet:=
			for_each_ne(
				'fs_' + string(fileset/values_extra)
				,'VerwerkFileSet('+ string(fileset/values_extra) + ')'
			);

		Template VerwerkFileSet
		{
			// begin case parameters
			parameter<uint32> fileset_rel;
			// end case parameters

			unit<uint32>      File: = select_with_org_rel(FilesAll/fileset_rel = fileset_rel);

			attribute<string> FileName(File): = FilesAll/FileName[File/org_rel];
			attribute<String> XmlData (File)
			:	StorageType = "strfiles"
			,	StorageName = "=XmlDir";

			/* pand voorbeeld schema
			<bag_LVC:Pand>
				<bag_LVC:identificatie>0153100000283858</bag_LVC:identificatie>
				<bag_LVC:aanduidingRecordInactief>N</bag_LVC:aanduidingRecordInactief>
				<bag_LVC:aanduidingRecordCorrectie>0</bag_LVC:aanduidingRecordCorrectie>
				<bag_LVC:officieel>N</bag_LVC:officieel>
				<bag_LVC:pandGeometrie>
					<gml:Polygon srsName="urn:ogc:def:crs:EPSG::28992">
						<gml:exterior>
							<gml:LinearRing>
								<gml:posList srsDimension="3" count="5">
									256523.045 470604.942 0.0 256532.681 470606.892 0.0 256531.758 470611.674 0.0 256522.094 470609.815 0.0 256523.045 470604.942 0.0
								</gml:posList>
							</gml:LinearRing>
						</gml:exterior>
					</gml:Polygon>
				</bag_LVC:pandGeometrie>
				<bag_LVC:bouwjaar>1918</bag_LVC:bouwjaar>
				<bag_LVC:pandstatus>Pand in gebruik</bag_LVC:pandstatus>
				<bag_LVC:tijdvakgeldigheid>
					<bagtype:begindatumTijdvakGeldigheid>2010031700000100</bagtype:begindatumTijdvakGeldigheid>
				</bag_LVC:tijdvakgeldigheid>
				<bag_LVC:inOnderzoek>N</bag_LVC:inOnderzoek>
				<bag_LVC:bron>
					<bagtype:documentdatum>20100317</bagtype:documentdatum>
					<bagtype:documentnummer>1000007208</bagtype:documentnummer>
				</bag_LVC:bron>
			</bag_LVC:Pand>
			*/

			container ParsedXML  := parse_xml(XmlData, schema);
			container geoBuilder := Templates/ProcessGmlPolygon(ParsedXML/bag_LVC_pand,false);

		}
		template schema // xml attributes are here modelled as sub units of the entity related unit.
		{
			unit<uint32> bag_LVC_pand {
				attribute<string> bag_LVC_identificatie: StorageName = "%LocalDataProjDir%/pand_id_1.fss";
//					unit<uint32> pandGeometrie;

				unit<uint32> gml_Polygon { // 1-1 relationship is assumed/likely
//						attribute<string> srsName;

//						unit<uint32> gml_Exterior { // 1-1 relationship is prescibed by the gml schema
//							unit<uint32> gml_LinearRing { // 1-1 relationship is prescibed by the gml schema
							unit<uint32> gml_posList // 1-1 relationship is assumed/likely
							{
								attribute<string> srsDimension; // attribute, must only have the value 3
								attribute<string> count;
							}
//							} // </gml_LinearRing>
//						}
					unit<uint32> gml_Interior {
//							unit<uint32> gml_LinearRing { // 1-1 relationship is prescibed by the gml schema
							unit<uint32> gml_posList // 1-1 relationship is assumed/likely
							{
								attribute<string> srsDimension; // attribute, must only have the value 3
								attribute<string> count;
							}
//							} // </gml_LinearRing>
					}
				} // </gml_Polygon>
				attribute<string> bag_LVC_bouwjaar;

				attribute<string> bag_LVC_pandStatus;

				attribute<string> bag_LVC_aanduidingRecordInactief;
				attribute<string> bag_LVC_aanduidingRecordCorrectie;
				attribute<string> bag_LVC_officieel;
				attribute<string> bag_LVC_inOnderzoek;
				// attribute<string> bag_LVC_isIndicatie;

				attribute<string> bagtype_begindatumTijdvakGeldigheid;
				attribute<string> bagtype_einddatumTijdvakGeldigheid;
				attribute<string> bagtype_documentdatum;
				attribute<string> bagtype_documentnummer;
			}
		}
	}
	container Templates
	{
		Template posListProcessor {
			// begin case parameters
			unit<uint32> posList;
			parameter<bool> isExterior;
			// end case parameters
	
			unit<uint32> impl := posList
			{
	//			attribute<string>  count              := parsedXMLsrc/gml_posList/count;
				attribute<string>  values             := _ValuesTable/Values[value_rel];
				attribute<string>  str_sequence       := '{'+string(uint32(count) * uint32(srsDimension)) + ':' + values + '}', IntegrityCheck = "srsDimension == '2' || srsDimension == '3'";
				attribute<Float64> f64_sequence(poly) := Float64Seq(str_sequence);
	
				unit<uint32> posListUnit := range(uint32, 0, #posList) // trick to avoid coordinates/SequenceNr having an untraceable values unit.
				{
					attribute<uint32> nrCoordPerPoint := union_data(posListUnit, uint32(srsDimension));
				}
				unit<uint32> coordinates := sequence2points(union_data(posListUnit, f64_sequence));
	
				unit<uint32> p := select_with_org_rel(coordinates/ordinal % posListUnit/nrCoordPerPoint[coordinates/SequenceNr] == 0)
				{
					attribute<float64>     x    := coordinates/point[org_rel  ];
					attribute<float64>     y    := coordinates/point[org_rel+1];
					attribute<rdc_mm>      p_mm := point_yx(Round(y * 1000.0), Round(x * 1000.0), rdc_mm);
					attribute<posListUnit> s    := coordinates/SequenceNr[org_rel];
					attribute<uint32>      fo   := coordinates/ordinal[org_rel] / posListUnit/nrCoordPerPoint[s]; // forward winding
					attribute<uint32>      ro   := pcount(s)[s] - fo - 1; // reverse winding
				}
				attribute<rdc_mm> geometry_mm (poly) := union_data(posList, points2sequence_pso(p/p_mm, p/s, isExterior ? p/ro : p/fo));
			}
			attribute<rdc_mm> result (posList, poly) := impl/geometry_mm[rdc_mm];
		}

		Template union {
			// begin case parameters
			unit<uint32> child;
			unit<uint32> parent;
			attribute<rdc_mm> geometry(child, poly);
			attribute<parent> parent_rel(child);
			// end case parameters
	
			attribute<rdc_mm> result(poly,parent) := partitioned_union_polygon(geometry, parent_rel);
		}

		Template optimized_union {
			// begin case parameters
			unit<uint32> child;
			unit<uint32> parent;
			attribute<rdc_mm> geometry(child, poly);
			attribute<parent> parent_rel(child);
			// end case parameters
	
			container impl {
				attribute<uint32> count(parent) := pcount(parent_rel);
				unit<uint32> childCopy := range(child, 0, #child)
				{
	//					attribute<rdc_mm> geometry2(poly) := union_data(., geometry);
	//					attribute<parent> parent_rel2 := union_data(., parent_rel);
				}
	//				unit<uint32> nonTrivialChild := select_with_org_rel((count != 1)[childCopy/parent_rel2])
				unit<uint32> nonTrivialChild := select_with_org_rel((count != 1)[union_data(childCopy, parent_rel)])
				{
					attribute<child> child_rel := value(org_rel, child);
					attribute<rdc_mm> union(poly,parent) := partitioned_union_polygon(geometry[child_rel], parent_rel[child_rel]);
				}
			}
			attribute<rdc_mm> result (poly,parent) := impl/count <= 1 ? geometry[invert(parent_rel)] : impl/nonTrivialChild/union;
			attribute<Int32>  area   (parent)      := area(result, Int32); // DEBUG
		}

		Template one2one_union {
			// begin case parameters
			unit<uint32> child;
			unit<uint32> parent;
			attribute<rdc_mm> geometry(child, poly);
			attribute<parent> parent_rel(child);
			// end case parameters
	
			container impl {
	//			attribute<uint32> count(parent) := pcount(parent_rel);
				parameter<bool> Check := (#child == #parent) && all(value(parent_rel, child) == ID(child));
			}
			attribute<rdc_mm> result(poly,parent) := union_data(parent, geometry), IntegrityCheck = "impl/Check";
		}

		Template LinearRing
		{
			// begin case parameters
			unit<uint32> parsedXMLsrc;
			parameter<bool> isExterior;
			// end case parameters
	
			container impl {
				container posList := posListProcessor(parsedXMLsrc/gml_posList, isExterior);
				container union   := one2one_union(parsedXMLsrc/gml_posList, parsedXMLsrc, posList/result, parsedXMLsrc/gml_posList/Parent_rel);
			}
			attribute<rdc_mm> geometry_mm(poly,parsedXMLsrc) := impl/union/result;
		}

		Template Polygon
		{
			// begin case parameters
			unit<uint32>        Exterior;
			attribute<rdc_mm>   ExtGeometry(Exterior, poly);
			unit<uint32>        Interior;
			attribute<rdc_mm>   IntGeometry(Interior, poly);
			attribute<Exterior> Parent_rel(Interior);
			// end case parameters
	
			container impl
			{
				container IntUnion := optimized_union(Interior, Exterior, IntGeometry, Parent_rel);
				attribute<uint32> count(Exterior) := pcount(parent_rel);
	
				unit<uint32> ExtCopy := range(Exterior, 0, #Exterior)
				{
					attribute<uint32> count2 := union_data(., count);
				}
	
				unit<uint32> nonTrivialExterior := select_with_org_rel(ExtCopy/count2 > 0)
				{
					attribute<Exterior> Exterior_rel := value(org_rel, Exterior);
					attribute<rdc_mm> diff(poly) := ExtGeometry[Exterior_rel] - IntUnion/result[Exterior_rel];
				}
	
				attribute<rdc_mm> result(poly,Exterior) := impl/nonTrivialExterior/diff[invert(impl/nonTrivialExterior/Exterior_rel)];
			}
			attribute<rdc_mm> result(poly,Exterior) := impl/count == 0 ? ExtGeometry : impl/result;
			attribute<Int32>  area  (Exterior)      := area(result, Int32); // DEBUG
		}

		Template ProcessGmlPolygonImpl
		{
			// begin case parameters
			unit<uint32> gmlPolygon;
			// end case parameters
	
			container Exterior      := Templates/LinearRing(gmlPolygon, true);
			container Interior      := Templates/LinearRing(gmlPolygon/gml_Interior, false);
			container Polygon       := Templates/Polygon(
				gmlPolygon,              Exterior/geometry_mm,
				gmlPolygon/gml_Interior, Interior/geometry_mm,
				gmlPolygon/gml_Interior/Parent_rel
			);
		}

		Template ProcessGmlPolygon
		{
			// begin case parameters
			unit<uint32>    gmlContext;
			parameter<bool> hasMultiplePolygons;
			// end case parameters
	
			container impl := ProcessGmlPolygonImpl(gmlContext/gml_Polygon);
	
			parameter<string> geometry_expr:= hasMultiplePolygons
				?	'Templates/optimized_union(impl/gmlPolygon, gmlContext, impl/Polygon/result, impl/gmlPolygon/Parent_rel)'
				:	'Templates/one2one_union(impl/gmlPolygon, gmlContext, impl/Polygon/result, impl/gmlPolygon/Parent_rel)';
	
			container geometry := = geometry_expr;
			attribute<rdc_mm> result (gmlContext, polygon) := geometry/result;
		}
	}
}