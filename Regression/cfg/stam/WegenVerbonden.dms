////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                            //
//                              Operator/Functie Test                                                         //
//                                                                                                            //
//                  Configuratie voor het testen van DMS Operatoren/Functies met lange rekentijd              //
//                                                                                                            //
//                                       April 2018                                                           //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                            //
//                 Configuratiebestand om uit een (NWB) wegenset een verbonden netwerk op te bouwen           //
//                                                                                                            //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////

container WegenVerbonden
{
	unit<uint32> wegen := brondata/weg
	,	DialogData = "geometry"
	,	DialogType = "Map"
	{
		attribute<point_rd> geometry (arc) := brondata/weg/geometry;
		attribute<km_hr>    KMH            := brondata/weg/KMH;
		attribute<bool>     IsSnelweg      := brondata/weg/IsSnelweg;
	}

	unit <uint32> LinkSet:= wegen
	,	DialogData = "geometry"
	,	DialogType = "Map"
	{
		attribute<point_rd>       geometry (arc) := wegen/geometry;
		
		attribute<point_rd>       point          := first_node(geometry);
		attribute<point_rd>       nextpoint      := last_node(geometry);
		attribute<eenheden/km_hr> KMH            := wegen/KMH;

		attribute<m>              length_m       := (arc_length(geometry, float32)[m]);
		attribute<eenheden/km>    length_km      := length_m / value(1000, m / eenheden/km);
		attribute<hr>             traveltime_hr  := length_km /KMH;
		attribute<s>              traveltime_s   := traveltime_hr * value(3600, s / hr);

		unit<uint32> pointset : = union_unit(LinkSet, LinkSet)
		{
			attribute<point_rd> point       := union_data(., LinkSet/point, LinkSet/nextpoint);
			attribute<bool>     isVerbonden := isNull(rlookup(point, NodesNotConnected/point));
			attribute<LinkSet>  ArcNr       := value(ID(.) % #(LinkSet), LinkSet);
			attribute<uint32>   VolgNr      := ID(.) / #(LinkSet);
		}
		attribute<bool> isVerbonden := all(pointset/isVerbonden, pointset/ArcNr);
	}

	unit<uint32> NodeSet := unique(LinkSet/pointset/point)
	,	DialogData = "Values"
	,	DialogType = "Map"
	{
		attribute<point_rd> values;
		attribute<Linkset>  LinkSetnr       := rlookup(values, LinkSet/point);
		attribute<uint32>   NrConnectedLinks:= pcount(F1) + pcount(F2);
	}
	
	container ConnectingLinks 
	// hiermee wordt voor ieder begin en eind node het aantal geconnecte links bepaald
	// dit bepaalt of het een bocht (2 links), zijweg (3 links), kruising (4 links) of complexe kruising (meer dan 4 links) is
	// afhankelijk van dit aantal wordt een aantal seconden opgeteld bij de totale impedance
	{
		parameter<s> Impedance2Links    := 0[s];
		parameter<s> Impedance3Links    := 2[s];
		parameter<s> Impedance4Links    := 5[s];
		parameter<s> Impedance_gt4Links := 6[s];

		attribute<uint32> Start(LinkSet): = NodeSet/NrConnectedLinks[F1];
		attribute<uint32> End  (LinkSet): = NodeSet/NrConnectedLinks[F2];

		attribute<s> impedance_Start (LinkSet):=
			switch(
				 case(Start <= 2, Impedance2Links)
				,case(Start  = 3, Impedance3Links)
				,case(Start  = 4, Impedance4Links)
				,Impedance_gt4Links
			);

		attribute<s> impedance_End (LinkSet):=
			switch(
				 case(End <= 2, Impedance2Links)
				,case(End  = 3, Impedance3Links)
				,case(End  = 4, Impedance4Links)
				,Impedance_gt4Links
			);
	}
	attribute<s> traveltime_all_s (LinkSet) := linkset/traveltime_s + ConnectingLinks/impedance_Start + ConnectingLinks/impedance_End;

	attribute<NodeSet> F1(LinkSet) := rlookup(LinkSet/point,     NodeSet/Values);
	attribute<NodeSet> F2(LinkSet) := rlookup(LinkSet/nextpoint, NodeSet/Values);

	unit<uint32> networks:= connected_parts(F1, F2) // Verzameling van alle netwerken, inclusief de subnetwerken.
	{
		attribute<uint32>   nr_nodes   : = sum(const(1, NodeSet, uint32), partnr);
		parameter<uint32>   MaxNrNodes : = max(networks/nr_nodes);
		parameter<networks> main       : = rlookup(MaxNrNodes, nr_nodes); // uitgangspunt: het netwerk met de meeste nodes is het relevante netwerk
	}

	unit<uint32> NodesNotConnected := Subset(networks/partnr <> networks/main)
	{
		attribute<point_rd> point := NodeSet/Values[Nr_OrgEntity];
	}

	container resultaat
	{
		unit<uint32> alle := Subset(Linkset/isVerbonden) // het resulterende verbonden wegennetwerk
		,	DialogType = "Map"
		,	DialogData = "geometry"
		{
			attribute<point_rd>           geometry (arc):= Linkset/geometry[nr_OrgEntity];
			attribute<eenheden/km_hr> KMH           := Linkset/KMH[nr_OrgEntity];
			attribute<s>                  traveltime_s  := traveltime_all_s[nr_OrgEntity];
			attribute<bool>               IsSnelweg     := wegen/IsSnelweg[nr_OrgEntity];
		}
	
		unit<uint32> geen_snelwegen := Subset(!alle/IsSnelweg) // het resulterende verbonden wegennetwerk zonder snelwegen, gebruikt voor het connecten.
		,	DialogType = "Map"
		,	DialogData = "geometry"
		{
			attribute<point_rd>           geometry (arc):= alle/geometry[nr_OrgEntity];
			attribute<eenheden/km_hr> KMH           := alle/KMH[nr_OrgEntity];
			attribute<s>                  traveltime_s  := alle/traveltime_s[nr_OrgEntity];
		}
	
		unit<uint32> snelwegen := Subset(alle/IsSnelweg) // het resulterende verbonden wegennetwerk alleen de snelwegen
		,	DialogType = "Map"
		,	DialogData = "geometry"
		{
			attribute<point_rd>           geometry (arc):= alle/geometry[nr_OrgEntity]
			{
				parameter<int16>  PenWidth:= int16(3)    , DialogType = "PenWidth";
				parameter<uint32> PenColor:= rgb(200,0,0), DialogType = "PenColor";
			}
			attribute<eenheden/km_hr> KMH           := alle/KMH[nr_OrgEntity];
			attribute<s>                  traveltime_s  := alle/traveltime_s[nr_OrgEntity];
		}
		
		container subset
		{
// 			unit<uint32> pointset_geen_snelwegen := sequence2points(resultaat/geen_snelwegen/geometry)
// 			{
// 				attribute<point_rd> point;
// 				attribute<pointset_geen_snelwegen> sequencenr;
// 				attribute<uint32> ordinal;
// 			}
			
			unit<uint32> arcset := Subset(id(resultaat/geen_snelwegen) == 579922 || id(resultaat/geen_snelwegen) == 13220)
			{
				attribute<point_rd> geometry (arc):= resultaat/geen_snelwegen/geometry[nr_OrgEntity];
			}

			unit<uint32> pointset := Subset(id(Brondata/PC6_centroid) == 167067)
			{
				attribute<point_rd> geometry   := Brondata/PC6_centroid/geometry[nr_OrgEntity];

				unit<uint32> connect := connect(arcset/geometry, geometry), DisableStorage = "True"
				{
					attribute<point_rd> UnionData(arc);
				}

				container connect_info := connect_info(arcset/geometry, geometry), DisableStorage = "True", DialogType = "Map", DialogData = "CutPoint"
				{
					attribute<point_rd> CutPoint (pointset);
					attribute<float64>  dist     (pointset);
					attribute<arcset>   ArcId    (pointset);
				}
			}
		}
	}
}