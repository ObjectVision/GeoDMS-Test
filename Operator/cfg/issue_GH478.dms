container issue_GH478
{
	unit<uint32> A
	: StorageName = "%projdir%/data/origin.shp"
	, StorageType = "gdal.vect"
	, StorageReadOnly = "true"
	{
		attribute<float32> impedance := value(id(.), float32);
		attribute<uint32> F1        := id(.);
		attribute<uint32> F2        := id(.);
		unit<uint32> aaa := range(uint32, 0, 10);
	}
	
	unit<uint32> B := A;
	
	unit<uint32> C := B;
	
	unit<uint64> Matrix :=
		dijkstra_m64('bidirectional;startPoint(Node_rel);endPoint(Node_rel);od:OrgZone_rel,DstZone_rel,impedance'
			, C/impedance
			, C/F1
			, C/F2
			///
			, C/F1
			, C/F1
		)
	{
	}
	attribute<uint32> fff1(A) := C/F1;
	attribute<C/AAA> fff2(A) := convert(B/F1, A/AAA); // C should also be an implied supplier !
	
	template cube {
		parameter<float64> x;
		parameter<float64> result := x*x*x;
	}
	container cube_pi := cube(3.14);
	
	parameter<float64> pi_cubed := cube_pi/result;
	container issue_308
	{
		unit<uint32> Digits := range(uint32, 0, 10)
		{
			attribute<uint32> prevprev := ID(.) - 2;
		}
		
		unit<uint32> set := unique(Digits/prevprev);
	}
	
}