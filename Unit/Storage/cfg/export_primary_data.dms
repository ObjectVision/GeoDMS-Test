container export_primary_data
{
	unit<float32> m := baseunit('m', float32);
	unit<fpoint>  point_rd_base : SpatialReference = "EPSG:28992";
	unit<fpoint>  point_rd      := range(point_rd_base, point(300000[m],0[m]), point(625000[m],280000[m]));
	//unit<fpoint>  point_rd;

	container source
	{
		unit<uint32> pointset: nrofrows = 177
		{
			attribute<point_rd> point:
			[
				 {403025,113810},{402552,113711},{402558,113646},{402428,113636},{402448,113472},{402480,113244},{402503,113057},{402570,112883},{402576,112884},{402578,112876},{402647,112740},{402697,112555},{402698,112554},{402973,112471},{402977,112473},{403544,112312},{403552,112612},{403434,112809},{403298,113032},{403171,113401},{403025,113810}
				,{400990,113269},{400888,113291},{400886,113192},{400883,113120},{400916,112666},{400893,112424},{400817,112176},{400864,112187},{401157,112293},{401322,112404},{401494,112519},{401597,112589},{401558,112840},{401553,112888},{401288,112945},{401065,113187},{400990,113269}
				,{401238,115099},{401047,115164},{400978,114523},{400965,114314},{400926,113796},{400919,113685},{400888,113291},{400990,113269},{401065,113187},{401288,112945},{401553,112888},{401510,113137},{401550,113377},{401602,113684},{401642,113915},{401567,114437},{401475,114991},{401462,115075},{401238,115099}
				,{402174,113703},{402076,113691},{402076,113690},{401742,113655},{401723,113659},{401602,113684},{401510,113137},{401553,112888},{402697,112555},{402647,112740},{402578,112876},{402577,112876},{402576,112884},{402570,112883},{402503,113057},{402480,113244},{402448,113472},{402446,113472},{402428,113636},{402426,113634},{402414,113716},{402281,113770},{402174,113703}
				,{401531,114646},{401567,114437},{401642,113915},{401602,113684},{401723,113659},{401742,113655},{402077,113690},{402076,113691},{402076,113690},{402077,113690},{402174,113703},{402281,113770},{402272,113831},{402263,113896},{402199,114330},{402194,114374},{402223,114390},{402197,114497},{402086,114462},{402049,114612},{401988,114592},{401980,114626},{401803,114574},{401790,114655},{401765,114673},{401757,114803},{401545,114739},{401567,114983},{401475,114991},{401531,114646}
				,{402757,114546},{402404,114445},{402317,114418},{402192,114373},{402263,113896},{402281,113770},{402414,113716},{402428,113636},{402558,113646},{402552,113711},{403025,113810},{402870,114237},{402757,114546}
				,{405282,113562},{405282,113561},{405183,113537},{404996,113582},{404923,113297},{404776,113283},{404669,113160},{404669,113068},{404576,113022},{404353,113116},{404300,112976},{404256,112989},{404154,112857},{404063,112893},{403939,112611},{403770,112450},{403792,112379},{403544,112312},{402977,112473},{402973,112471},{402698,112554},{402697,112555},{401553,112888},{401558,112840},{401597,112589},{401494,112519},{401322,112404},{401157,112293},{400943,112215},{401063,111873},{401234,111711},{401477,111716},{401653,111646},{402133,111453},{402382,111433},{402859,111567},{403372,111821},{403701,111952},{403834,112009},{403934,112040},{404010,112054},{404157,112066},{404271,112054},{404555,111996},{404649,111969},{404664,111986},{404631,112040},{404620,112098},{405013,112720},{405495,113478},{405454,113512},{405415,113601},{405353,113625},{405282,113562}
			];
			attribute<geographic/district> district_rel:
			[
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
				2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
				3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
				4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,
				5,5,5,5,5,5,5,5,5,5,5,5,5,
				6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6
			];
			attribute<uint32> ordinal:
			[
				0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
				0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,
				0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,
				0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,
				0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,
				0,1,2,3,4,5,6,7,8,9,10,11,12,
				0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53
			];
		}
		container Grid
		{
			attribute<point_rd> lowerbound (geographic/district) := lower_bound(geographic/district/geometry);
			attribute<point_rd> upperbound (geographic/district) := upper_bound(geographic/district/geometry);
	
			parameter<m> x_min := min(PointCol(lowerbound)[m]);
			parameter<m> x_max := max(PointCol(upperbound)[m]);
	
			parameter<m> y_min := min(PointRow(lowerbound)[m]);
			parameter<m> y_max := max(PointRow(upperbound)[m]);
		
			parameter<m> gridsize:= 10[m];

			parameter<int16> nr_cols := int16((x_max - x_min) / gridsize);
			parameter<int16> nr_rows := int16((y_max - y_min) / gridsize);

			unit<spoint> untiled_domain :=
				range(
					 gridset(
						 point_rd
						,point(float32(-gridsize), float32(gridsize), point_rd)
						,point(y_max, x_min, point_rd)
						,spoint
					)
					,point(0s, 0s)
					,point(nr_rows, nr_cols)
				)
			,	DialogData = "point_rd";

			unit<spoint> domain := TiledUnit(point(1024s, 1024s, untiled_domain))
			{
				parameter<m>     size := gridsize;
				attribute<.>     id   := id(.);
				attribute<int16> row  := PointRow(id);
				attribute<int16> col  := PointCol(id);
			}
		}
	}
	container geographic
	{
		unit<uint32> district : nrofrows = 7
		{
			attribute<point_rd> geometry (polygon) := points2sequence(source/pointset/point, source/pointset/district_rel, source/pointset/ordinal);
			attribute<point_rd> centroid           := centroid(geometry);

			attribute<string>   label              := 'gebied_' + string(id(.));
		}
		unit<spoint> grid := Source/Grid/domain 
		{
			attribute<district> district_rel  := poly2grid(district/geometry, .);
		}
	}
	container non_geographic
	{
		unit<uint32> table : nrofrows = 6
		{
			attribute<int32>   IntegerAtt : [0,1,256,-100,9999, null];
			attribute<float32> FloatAtt   : [0,1,999999,-2.5,99.9, null];
			attribute<string>  StringAtt  : ['Hello','Test','null','Two words','88a', null];
			attribute<bool  >  Bool       : [True, False, True, False, True, False];
			//attribute<fpoint>  IFloatAtt (poly) := point(FloatAtt, FloatAtt, fpoint);
		}
	}
}