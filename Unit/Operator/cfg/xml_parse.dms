container xml_parse
{
	unit<dpoint> rdc_base;
	unit<dpoint> rdc_meter := range(rdc_base, point(300000d,0d), point(625000d,280000d));
	unit<ipoint> rdc_mm    := gridset(rdc_meter, point(0.001, 0.001), point(0.0,0.0), ipoint);

	parameter<string> XmlData 
	: StorageType = "str"
	, StorageName = "%projDir%/data/xml_pand.xml";

	container ParsedXML := parse_xml(XmlData, schema);

	template schema
	{
		unit<uint32> bag_LVC_pand 
		{
			attribute<string> bag_LVC_identificatie;

			unit<uint32> gml_Polygon 
			{
				unit<uint32> gml_posList
				{
					attribute<string> srsDimension;
					attribute<string> count;
				}
				unit<uint32> gml_Interior 
				{
					unit<uint32> gml_posList
					{
						attribute<string> srsDimension;
						attribute<string> count;
					}
				}
			}
			attribute<string> bag_LVC_bouwjaar;
		}
	}

	container geoBuilder := Templates/ProcessGmlPolygon(ParsedXML/bag_LVC_pand,false);


	container tests
	{ 
		parameter<bool> identificatie := ParsedXML/bag_LVC_pand/bag_LVC_identificatie[0]         == '0197100000013045';
		parameter<bool> bouwjaar      := ParsedXML/bag_LVC_pand/bag_LVC_bouwjaar[0]              == '1950';
		parameter<bool> count_poslist := ParsedXML/bag_LVC_pand/gml_Polygon/gml_posList/count[0] == '6';

		parameter<bool> poslist       := ParsedXML/bag_LVC_pand/gml_Polygon/gml_posList/_ValuesTable/Values[0] = 
			'237037.507 438780.781 0.0 237039.05 438780.447 0.0 237040.341 438780.167 0.0 237041.241 438785.24 0.0 237038.439 438785.859 0.0 237037.507 438780.781 0.0';

		parameter<bool> area_polygon := round(area(fpolygon(geoBuilder/result[0]), float32)) == 14909184i ;

		parameter<bool> all := identificatie && bouwjaar && count_poslist && poslist && area_polygon;
	}

	parameter<string> test_log := tests/all 
		? '' 
		: 'Parse xml file: ' + expand(., '%configDir%') + '.dms ' + PropValue(tests/all, 'fullname') + ' result: not OK'
	,	StorageType = "str"
	,	storagename = "%localDataDir%/GeoDMSTestResults/unit/operator/parse_xml_pand.txt";

	/* pand voorbeeld schema
	<bag_LVC:Pand>
		<bag_LVC:identificatie>0197100000013045</bag_LVC:identificatie>
		<bag_LVC:aanduidingRecordInactief>N</bag_LVC:aanduidingRecordInactief>
		<bag_LVC:aanduidingRecordCorrectie>0</bag_LVC:aanduidingRecordCorrectie>
		<bag_LVC:officieel>N</bag_LVC:officieel>
		<bag_LVC:pandGeometrie>
			<gml:Polygon srsName="urn:ogc:def:crs:EPSG::28992">
				<gml:exterior>
					<gml:LinearRing>
						<gml:posList srsDimension="3" count="6">
							237037.507 438780.781 0.0 237039.05 438780.447 0.0 237040.341 438780.167 0.0 237041.241 438785.24 0.0 237038.439 438785.859 0.0 237037.507 438780.781 0.0
						</gml:posList>
					</gml:LinearRing>
				</gml:exterior>
			</gml:Polygon>
		</bag_LVC:pandGeometrie>
		<bag_LVC:bouwjaar>1918</bag_LVC:bouwjaar>
		<bag_LVC:pandstatus>Pand in gebruik</bag_LVC:pandstatus>
		<bag_LVC:tijdvakgeldigheid>
			<bagtype:begindatumTijdvakGeldigheid>2010031700000100</bagtype:begindatumTijdvakGeldigheid>
		</bag_LVC:tijdvakgeldigheid>
		<bag_LVC:inOnderzoek>N</bag_LVC:inOnderzoek>
		<bag_LVC:bron>
			<bagtype:documentdatum>20100317</bagtype:documentdatum>
			<bagtype:documentnummer>1000007208</bagtype:documentnummer>
		</bag_LVC:bron>
	</bag_LVC:Pand>
	*/
	container Templates
	{
		Template ProcessGmlPolygon
		{
			// begin case parameters
			unit<uint32>    gmlContext;
			parameter<bool> hasMultiplePolygons;
			// end case parameters
	
			container impl := ProcessGmlPolygonImpl(gmlContext/gml_Polygon);
	
			parameter<string> geometry_expr:= hasMultiplePolygons
				?	'Templates/optimized_union(impl/gmlPolygon, gmlContext, impl/Polygon/result, impl/gmlPolygon/Parent_rel)'
				:	'Templates/one2one_union(impl/gmlPolygon, gmlContext, impl/Polygon/result, impl/gmlPolygon/Parent_rel)';
	
			container geometry := = geometry_expr;
			attribute<rdc_mm> result (gmlContext, polygon) := geometry/result;
		}
		Template ProcessGmlPolygonImpl
		{
			// begin case parameters
			unit<uint32> gmlPolygon;
			// end case parameters
	
			container Exterior      := Templates/LinearRing(gmlPolygon, true);
			container Interior      := Templates/LinearRing(gmlPolygon/gml_Interior, false);
			container Polygon       := Templates/Polygon(
				gmlPolygon,              Exterior/geometry_mm,
				gmlPolygon/gml_Interior, Interior/geometry_mm,
				gmlPolygon/gml_Interior/Parent_rel
			);
		}
		Template LinearRing
		{
			// begin case parameters
			unit<uint32> parsedXMLsrc;
			parameter<bool> isExterior;
			// end case parameters
	
			container impl {
				container posList := posListProcessor(parsedXMLsrc/gml_posList, isExterior);
				container union   := one2one_union(parsedXMLsrc/gml_posList, parsedXMLsrc, posList/result, parsedXMLsrc/gml_posList/Parent_rel);
			}
			attribute<rdc_mm> geometry_mm(poly,parsedXMLsrc) := impl/union/result;
		}
		Template Polygon
		{
			// begin case parameters
			unit<uint32>        Exterior;
			attribute<rdc_mm>   ExtGeometry(Exterior, poly);
			unit<uint32>        Interior;
			attribute<rdc_mm>   IntGeometry(Interior, poly);
			attribute<Exterior> Parent_rel(Interior);
			// end case parameters
	
			container impl
			{
				container IntUnion := optimized_union(Interior, Exterior, IntGeometry, Parent_rel);
				attribute<uint32> count(Exterior) := pcount(parent_rel);
	
				unit<uint32> ExtCopy := range(Exterior, 0, #Exterior)
				{
					attribute<uint32> count2 := union_data(., count);
				}
	
				unit<uint32> nonTrivialExterior := subset(ExtCopy/count2 > 0)
				{
					attribute<Exterior> Exterior_rel := value(nr_OrgEntity, Exterior);
					attribute<rdc_mm> diff(poly) := ExtGeometry[Exterior_rel] - IntUnion/result[Exterior_rel];
				}
	
				attribute<rdc_mm> result(poly,Exterior) := impl/nonTrivialExterior/diff[invert(impl/nonTrivialExterior/Exterior_rel)];
			}
			attribute<rdc_mm> result(poly,Exterior) := impl/count == 0 ? ExtGeometry : impl/result;
			attribute<Int32>  area  (Exterior)      := area(result, Int32); // DEBUG
		}
		Template posListProcessor {
			// begin case parameters
			unit<uint32> posList;
			parameter<bool> isExterior;
			// end case parameters
	
			unit<uint32> impl := posList
			{
	//			attribute<string>  count              := parsedXMLsrc/gml_posList/count;
				attribute<string>  values             := _ValuesTable/Values[value_rel];
				attribute<string>  str_sequence       := '{'+string(uint32(count) * uint32(srsDimension)) + ':' + values + '}', IntegrityCheck = "srsDimension == '2' || srsDimension == '3'";
				attribute<Float64> f64_sequence(poly) := Float64Seq(str_sequence);
	
				unit<uint32> posListUnit := range(uint32, 0, #posList) // trick to avoid coordinates/SequenceNr having an untraceable values unit.
				{
					attribute<uint32> nrCoordPerPoint := union_data(posListUnit, uint32(srsDimension));
				}
				unit<uint32> coordinates := sequence2points(union_data(posListUnit, f64_sequence));
	
				unit<uint32> p := subset(coordinates/ordinal % posListUnit/nrCoordPerPoint[coordinates/SequenceNr] == 0)
				{
					attribute<float64>     x    := coordinates/point[nr_OrgEntity  ];
					attribute<float64>     y    := coordinates/point[nr_OrgEntity+1];
					attribute<rdc_mm>      p_mm := point(Round(y * 1000.0), Round(x * 1000.0), rdc_mm);
					attribute<posListUnit> s    := coordinates/SequenceNr[nr_OrgEntity];
					attribute<uint32>      fo   := coordinates/ordinal[nr_OrgEntity] / posListUnit/nrCoordPerPoint[s]; // forward winding
					attribute<uint32>      ro   := pcount(s)[s] - fo - 1; // reverse winding
				}
				attribute<rdc_mm> geometry_mm (poly) := union_data(posList, points2sequence_pso(p/p_mm, p/s, isExterior ? p/ro : p/fo));
			}
			attribute<rdc_mm> result (posList, poly) := impl/geometry_mm[rdc_mm];
		}
		Template union 
		{
			// begin case parameters
			unit<uint32> child;
			unit<uint32> parent;
			attribute<rdc_mm> geometry(child, poly);
			attribute<parent> parent_rel(child);
			// end case parameters
	
			attribute<rdc_mm> result(poly,parent) := partitioned_union_polygon(geometry, parent_rel);
		}

		Template optimized_union {
			// begin case parameters
			unit<uint32> child;
			unit<uint32> parent;
			attribute<rdc_mm> geometry(child, poly);
			attribute<parent> parent_rel(child);
			// end case parameters
	
			container impl {
				attribute<uint32> count(parent) := pcount(parent_rel);
				unit<uint32> childCopy := range(child, 0, #child)
				{
	//					attribute<rdc_mm> geometry2(poly) := union_data(., geometry);
	//					attribute<parent> parent_rel2 := union_data(., parent_rel);
				}
	//				unit<uint32> nonTrivialChild := subset((count != 1)[childCopy/parent_rel2])
				unit<uint32> nonTrivialChild := subset((count != 1)[union_data(childCopy, parent_rel)])
				{
					attribute<child> child_rel := value(nr_OrgEntity, child);
					attribute<rdc_mm> union(poly,parent) := partitioned_union_polygon(geometry[child_rel], parent_rel[child_rel]);
				}
			}
			attribute<rdc_mm> result (poly,parent) := impl/count <= 1 ? geometry[invert(parent_rel)] : impl/nonTrivialChild/union;
			attribute<Int32>  area   (parent)      := area(result, Int32); // DEBUG
		}

		Template one2one_union {
			// begin case parameters
			unit<uint32> child;
			unit<uint32> parent;
			attribute<rdc_mm> geometry(child, poly);
			attribute<parent> parent_rel(child);
			// end case parameters
	
			container impl {
	//			attribute<uint32> count(parent) := pcount(parent_rel);
				parameter<bool> Check := (#child == #parent) && all(value(parent_rel, child) == ID(child));
			}
			attribute<rdc_mm> result(poly,parent) := union_data(parent, geometry), IntegrityCheck = "impl/Check";
		}
	}
}